// func.c
#include <stdio.h>
#include<string.h>
#include<stdlib.h>
#include "game.h"

// 전역 변수 정의
Piece board[BOARD_SIZE][BOARD_SIZE];
GameState gameState = { 0, 0 };

// 체스판 초기화 함수
void initBoard() {
    // 기본적인 초기화 (예: 폰 배치)
    for (int i = 0; i < BOARD_SIZE; i++) {
        board[1][i] = (Piece){ 'P', 'B',0 }; // 흑색 폰
        board[6][i] = (Piece){ 'P', 'W',0 }; // 백색 폰
    }
    board[0][0] = board[0][7] = (Piece){ 'R', 'B',0 }; // 흑색 룩
    board[0][1] = board[0][6] = (Piece){ 'N', 'B',0 }; // 흑색 나이트
    board[0][2] = board[0][5] = (Piece){ 'B', 'B',0 }; // 흑색 비숍
    board[0][3] = (Piece){ 'Q', 'B',0 }; // 흑색 퀸
    board[0][4] = (Piece){ 'K', 'B',0 }; // 흑색 킹
    board[7][0] = board[7][7] = (Piece){ 'R', 'W',0 }; // 백색 룩
    board[7][1] = board[7][6] = (Piece){ 'N', 'W',0 }; // 백색 나이트
    board[7][2] = board[7][5] = (Piece){ 'B', 'W',0 }; // 백색 비숍
    board[7][3] = (Piece){ 'Q', 'W',0 }; // 백색 퀸
    board[7][4] = (Piece){ 'K', 'W',0 }; // 백색 킹
    for (int i = 2; i < 6; i++) {
        for (int j = 0; j < BOARD_SIZE; j++) {
            board[i][j] = (Piece){ ' ', ' ' }; // 미지정
        }
    }
    
    // 다른 기물 초기화 코드 추가 가능
}

// 체스판 출력 함수
void printBoard() {
    for (int i = 0; i < BOARD_SIZE + 1; i++) {
        if (i == 8) {
            printf("---|---|---|---|---|---|---|---|---|\n   | a | b | c | d | e | f | g | h |\n");
        }
        else {
            printf("---|---|---|---|---|---|---|---|---|\n %c |", 56 - i);
            for (int j = 0; j < BOARD_SIZE; j++) {
                if (board[i][j].warning == 1) {
                    printf("\033[0;31m%c%c\033[0m |", board[i][j].color, board[i][j].type);
                }
                else {
                    printf("%c%c |", board[i][j].color, board[i][j].type);
                }
            }
        }
        printf("\n");
    }
}

void path_pv(int s_y, int s_x, int row, int col) {
    int y = s_y + row, x = s_x + col;
    while (1) {
        if (0 > y || y > 7 || 0 > x || x > 7){
            break;
        }
        else {
            if (board[s_y][s_x].color == board[y][x].color) {
                break;
            }
            else if (board[s_y][s_x].color != board[y][x].color && board[y][x].type != ' ') {
                board[y][x].warning = 1;
                break;
            }
            else {
                board[y][x].type = '"';
            }
        }
        y += row;
        x += col;
    }
}

void board_reset() {
    for (int i = 0; i < 8; i++) {
        for (int j = 0; j < 8; j++) {
            board[i][j].warning = 0;
            if (board[i][j].type == '"') {
                board[i][j].type = ' ';
            }
        }
    }
}

void pawn_pv(int s_y, int s_x) {
    if (board[s_y][s_x].color == 'B') {
        if (board[s_y + 1][s_x].type == ' ') {
            board[s_y + 1][s_x].type = '"';
            if (board[s_y + 2][s_x].type == ' ' && s_y == 1) {
                board[s_y + 2][s_x].type = '"';
            }
        }
        if (s_x - 1 > -1 && board[s_y + 1][s_x - 1].color == 'W') {
                board[s_y + 1][s_x - 1].warning = 1;
        }
        if (s_x + 1 < 8 && board[s_y + 1][s_x + 1].color == 'W') {
            board[s_y + 1][s_x + 1].warning = 1;
        }
        
        
    }
    else if (board[s_y][s_x].color == 'W') {
        if (board[s_y - 1][s_x].type == ' ') {
            board[s_y - 1][s_x].type = '"';
            if (board[s_y - 2][s_x].type == ' ' && s_y == 6) {
                board[s_y - 2][s_x].type = '"';
            }
        }
        if (s_x - 1 > -1 && board[s_y - 1][s_x - 1].color == 'B') {
            board[s_y - 1][s_x - 1].warning = 1;
        }
        if (s_x + 1 < 8 && board[s_y - 1][s_x + 1].color == 'B') {
            board[s_y - 1][s_x + 1].warning = 1;
        }
    }
}
void rook_pv(int s_y, int s_x) { 
    int set[4][2] = { {1, 0}, {0, 1}, {-1, 0}, {0, -1} };
    for (int i = 0; i < 4; i++) {
        path_pv(s_y, s_x, set[i][0], set[i][1]);
    }
}
void knight_pv(int s_y, int s_x) {
    int y, x;
    int set[8][2] = { {2, -1}, {2, 1}, {1, 2}, {-1, 2}, {-2, 1}, {-2, -1}, {-1, -2}, {1, -2} };
    for (int i = 0; i < 8; i++) {
        y = s_y + set[i][0];
        x = s_x + set[i][1];
        if (-1 < y && y < 8 && -1 < x && x < 8) {
            if (board[s_y][s_x].color != board[y][x].color) {
                if (board[y][x].type != ' ') {
                    board[y][x].warning = 1;
                }
                else {
                    board[y][x].type = '"';
                }
                    
            }
        }
    }
}
void bishop_pv(int s_y, int s_x) {
    int set[4][2] = { {1, 1}, {-1, 1}, {-1, -1}, {1, -1} };
    for (int i = 0; i < 4; i++) {
        path_pv(s_y, s_x, set[i][0], set[i][1]);
    }
}
void queen_pv(int s_y, int s_x) {
    int set[8][2] = { {1, 0}, {0, 1}, {-1, 0}, {0, -1}, {1, 1}, {-1, 1}, {-1, -1}, {1, -1} };
    for (int i = 0; i < 8; i++) {
        path_pv(s_y, s_x, set[i][0], set[i][1]);
    }
}
void king_pv(int s_y, int s_x) {
    int x, y;
    int set[8][2] = { {1, 0}, {0, 1}, {-1, 0}, {0, -1}, {1, 1}, {-1, 1}, {-1, -1}, {1, -1} };
    for (int i = 0; i < 8; i++) {
        y = s_y + set[i][0];
        x = s_x + set[i][1];
        if (-1 < y && y < 8 && -1 < x && x < 8) {
            if (board[s_y][s_x].color != board[y][x].color) {
                if (board[y][x].type != ' ') {
                    board[y][x].warning = 1;
                }
                else {
                    board[y][x].type = '"';
                }
            }
        }
    }
}

void promote_pawn(int y, int x) {
    if (board[y][x].type == 'P') {
        if ((board[y][x].color == 'B' && y == 7) || (board[y][x].color == 'W' && y == 0)) {
            board[y][x].type = 'Q';  // 승격
            printf("Pawn promoted to Queen at %c%d!\n", x + 'a', 8 - y);
        }
    }
}

// 기물 이동 관리 함수
int show_path_of_piece(char select_piece[10]) {
    // 범위 체크 및 기본 이동 조건  s = start
    int s_y = 56 - (int)select_piece[1], s_x = (int)select_piece[0] - 97; //start지점 0~7로 변환
    int s_len = strlen(select_piece); //문자 길이
    char color[2] = { 'W', 'B' };
    char move_position[10];
    if (s_len == 2 && -1 < s_x && s_x < 8 && -1 < s_y && s_y < 8 && color[gameState.turn] == board[s_y][s_x].color) 
    {
        switch (board[s_y][s_x].type) {
        case 'P':
            pawn_pv(s_y, s_x);
            break;
        case 'R':
            rook_pv(s_y, s_x);
            break;
        case 'N':
            knight_pv(s_y, s_x);
            break;
        case 'B':
            bishop_pv(s_y, s_x);
            break;
        case 'Q':
            queen_pv(s_y, s_x);
            break;
        case 'K':
            king_pv(s_y, s_x);
            break;
        default:
            return 0;
        };
        printBoard();
        return 1;
    }
    return 0;
}

int move_along_path(char select_piece[10], char move_position[10]) {
    int s_y = 56 - (int)select_piece[1], s_x = (int)select_piece[0] - 97; //start지점 0~7로 변환
    int a_y = 56 - (int)move_position[1], a_x = (int)move_position[0] - 97; //start지점 0~7로 변환
    int a_len = strlen(move_position);
    if (a_len == 2 && -1 < a_x && a_x < 8 && -1 < a_y && a_y < 8) {
        if (board[a_y][a_x].type == '"' || board[a_y][a_x].warning == 1) {
            board[a_y][a_x].color = board[s_y][s_x].color;
            board[a_y][a_x].type = board[s_y][s_x].type;
            board[s_y][s_x].color = ' ';
            board[s_y][s_x].type = ' ';
            printf("\n기물이 이동했습니다!\n\n");
            promote_pawn(a_y, a_x);
            gameState.turn = !gameState.turn; //턴 변경
            return 1;
        }
    }
    return 0;
}
